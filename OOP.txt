面向对象三大主要特征：
	
	面向对象是基于面向过程的

	特征：封装、继承、多台、抽象

	1、类：对于具有相同特性的抽象描述

	2、对象：符合类的特性具体实体，对类的描述的属性有具体的值，能够完成类描述的功能

	3、对象和类的关系：创建对象的过程，称实例化对象，程序里我们是先有类之后才能实例化对象，实例化关键字  new

	4、类中属性默认值

		整数型 byte short int long 默认值为0
	    浮点数  float  double  默认值为0.0
	    字符型  char  默认值为’\u0000’
	    布尔型 boolean 默认值为false
	    字符串 String 默认值为null

	 一、封装

	 	* 类的封装步骤

	 		属性私有化  Private
	 		公开的访问方法，set赋值（有参数 无返回值）,get取值（无参数 有返回值）
	 		添加有参数和无参数的构造方法

	 	** 封装的优点

	 		良好的封装能够减少耦合，符合设计过程高内聚、低耦合

	 		类内部的结构可以自由修改

	 		可以对成员变量进行更准确地控制

	 		隐藏信息实现细节、提高代码安全性

	 	*** this和super关键字

	 		this关键字是为了解决实例变量 和 局部变量之间发生的同名冲突

	 		this关键字代表当前对象

	 		super指向超类对象的一个指针，而这个超类指的是离自己最近的一个父类

	 		从本质上讲，this是一个指向本对象的指针，super是个java关键字

	 二、继承

		 	继承是java面向对象变成技术的一块基石，因为他允许创建分等级层次的类

		 	继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或者子类从父类继承方法，使得子类具有父类相同的行为。

		 	继承的类型：java不支持多继承，但支持多重继承

		* 继承的好处

			提高代码复用性

			提高代码维护性

			使得类和类产生了关系，是多态的前提（它也是继承的一个弊端，类的耦合性提高了）

		** 继承的特性

			子类拥有父类非private的属性、方法

			子类有自己的方法、属性，也可以对父类进行扩展

		*** final关键字

			表示：最终的意思，可以修饰类、成员变量、成员方法

			修饰类：类不可以被继承

			修饰成员变量：变量为常量，值不可以改变

			修饰成员方法：方法不能被重写

			final还可以修饰局部变量：1、修饰基本数据类型，值不能改变；2、修饰引用数据类型，地址值不能改变

		**** static关键字（静态）

			表示静态意思，可以修饰成员变量，又可以修饰成员方法，还有一种特殊的用法修饰类

			静态变量和非静态的区别：

				静态变量被所有的对象所共享，在内存中只有一个副本，仅当类初次加载时会被初始化。

				非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。

			修饰成员方法：

				静态方法不依赖于任何对象就可以进行访问，因此是没有this的，因为不依赖任何对象，就谈不上this了。由于这个特性，在静态方法中不能访问类的非静态成员变量/成员方法，因为非静态成员方法/变量必须依赖具体对象才能够被调用。

			static代码块：

				关键的作用 用来形成静态代码块以优化程序性能，static可以在类中任何地方，可以有多个static，初次加载的时候，按照顺序来执行每个static块，只执行一次。

			特点：

				随着类的加载而加载

				优先于对象存在

				被所有的对象所共享

			静态变量和成员变量的区别

				所属不同

				内存位置不同：  静态存在方法区	 成员存在堆中

				出现时间不同

				调用方式不同

			成员变量与局部变量的区别

				在类中的位置不同

				在内存的位置不同：在堆中（方法区中的静态区）在栈中

				生命周期不同

				初始值：成员有默认初始值，局部没有初始，需赋值，否则编译报错（The local variable xxx may not have been initialized）

			static特殊用法(static修饰类)

				如果一个类要被声明为static的，只有一种情况，就是静态内部类

	 三、多态

	 		是同一个行为具有多个不同表现形式或形态能力


	 	* 什么是多态？实现多态的方法有哪些？

	 			多态是面向对象的最后一个特征：

	 				方法的多态性：重写和覆写

	 					重写（Override）：参数列表与被重写方法的参数列表必须完全相同

	 					重载（Overload）：方法名字相同，而参数不同。返回类型可以相同也可以不同

	 				对象的多态：父子类对象转换

	 					向上转型：子对象->父对象	父 父对象 = 子类实例  自动

	 					向下转型：父对象->子对象	子 子对象 = （子类）父类实例  强制

	 	** 多态的优点

		 		消除类型之间的耦合关系

		 		可替换性

		 		可扩充性

		 		接口性

		 		灵活性

		 		简化性

	 	*** 多态存在的三个必要条件

	 			继承     重写      父类引用指向子类

	 	**** 多态的实现方式

	 			方式一：重载和重写

	 			方式二：抽象类和抽象方法

	 		java中，一个没有方法体的方法称抽象方法。一个类中如果有抽象方法，那么这个类就称为抽象类

	 四、抽象

	 	* 特点

		 		抽象类不一定有抽象方法，但是有抽象方法的类一定是抽象类

		 		抽象类不可以实例化（不能用new关键字创建抽象实例）

		 		抽象类的子类，可以是抽象类，也可以是具体类。如果子类是具体类，需要重写抽象里面所有的抽象方法

	 	** 组成

	 			成员变量

	 				可以是变量，可以是常量

	 			构造方法

	 				抽象类不可以实例化，存在构造方法，有什么用？

	 					子类会调用父类的构造方法，对属性进行初始化赋值

	 			成员方法

	 				可以是抽象方法，也可以是具体方法

	 	*** 抽象(abstract)不能与那些关键字共存？

	 			private：因为一个abstract方法需要被重写，所以不能修饰为private;

	 			final：因为一个abstract方法需要被重写。被final修饰的方法是不能被重写的，所以不能同final共存；

	 			static：因为一个abstract方法没有方法体。静态方法需要对方法体执行内容分配空间，所以不能同static共存；

	 			synchronized：关键字的是需要有具体的实现同步的操作的，但是使用abstract是只有声明而没有实现的，这样就产生了冲突

	 			native:他们本身的定义就是冲突的，native声明的方法是移交本地操作系统实现的，而abstract是移交子类对象实现的，同时修饰的话，导致不知道谁实现声明的方法

	 	*** 接口

	 			JAVA编程语言中是一个抽象类型，是抽象方法的集合，通常以interface来声明。实际上是一个规范

	 			接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类

	 	**** 接口与类的区别

	 			接口不能用于实例化对象

	 			接口没有构造方法

	 			接口中所有的方法必须是抽象方法

	 			接口不能包含成员变量，除了static和final变量

	 			接口不是被类继承了，而是被类实现

	 			接口支持多继承

	 	***** 抽象类和接口的区别

	 			抽象类中可以有方法体，接口不能

	 			抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的

	 			接口中不能含有静态方法和静态代码块，而抽象类是可以有静态代码块和静态方法

	 			一个类只能继承一个抽象类，而一个类却可以实现多个接口

	 			接口和接口继承关系，可以单继承，多继承，多级继承

	 			接口多继承，抽象类单继承 因为java不允许多继承，多继承是通过接口来实现的